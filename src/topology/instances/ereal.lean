/-
Copyright (c) 2021 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import topology.instances.ennreal
import data.real.ereal

noncomputable theory

open classical set filter metric
open_locale classical topological_space ennreal nnreal big_operators filter

variables {Œ± : Type*} [topological_space Œ±]

namespace ereal


section topological_space
open topological_space


instance : topological_space ereal := preorder.topology ereal

instance : order_topology ereal := ‚ü®rfl‚ü©

instance : t2_space ereal := by apply_instance

instance : second_countable_topology ereal :=
‚ü®begin
  refine ‚ü®‚ãÉ (q : ‚Ñö), {{a : ereal | a < (q : ‚Ñù)}, {a : ereal | ((q : ‚Ñù) : ereal) < a}},
    countable_Union (Œª a, (countable_singleton _).insert _), _‚ü©,
  refine le_antisymm
    (le_generate_from $ by simp [or_imp_distrib, is_open_lt', is_open_gt'] {contextual := tt}) _,
  apply le_generate_from (Œª s h, _),
  rcases h with ‚ü®a, hs | hs‚ü©;
  [ rw show s = ‚ãÉq‚àà{q:‚Ñö | a < (q : ‚Ñù)}, {b | ((q : ‚Ñù) : ereal) < b},
      by { ext x, simpa only [hs, exists_prop, mem_Union] using a.lt_iff_exists_rat_btwn x},
    rw show s = ‚ãÉq‚àà{q:‚Ñö | ((q : ‚Ñù) : ereal) < a}, {b | b < ((q : ‚Ñù) : ereal)},
      by { ext x, simpa only [hs, and_comm, exists_prop, mem_Union]
        using x.lt_iff_exists_rat_btwn a, }];
  { apply is_open_Union, intro q,
    apply is_open_Union, intro hq,
    apply generate_open.basic,
    exact mem_Union.2 ‚ü®q, by simp‚ü© },
end‚ü©

lemma ereal_cases : ‚àÄ (a : ereal), a = ‚ä• ‚à® (‚àÉ (x : ‚Ñù), a = x) ‚à® a = ‚ä§
| ‚ä§ := by simp
| ‚ä• := by simp
| (a : ‚Ñù) := by simp

lemma embedding_coe : embedding (coe : ‚Ñù ‚Üí ereal) :=
‚ü®‚ü®begin
  refine le_antisymm _ _,
  { rw [@order_topology.topology_eq_generate_intervals ereal _,
      ‚Üê coinduced_le_iff_le_induced],
    refine le_generate_from (assume s ha, _),
    rcases ha with ‚ü®a, rfl | rfl‚ü©,
    show is_open {b : ‚Ñù | a < ‚Üëb},
    { rcases ereal_cases a with rfl|‚ü®x, rfl‚ü©|rfl,
      { simp only [is_open_univ, bot_lt_coe, set_of_true] },
      { simp only [ereal.coe_real_lt], exact is_open_Ioi },
      { simp only [set_of_false, is_open_empty, not_top_lt] } },
    show is_open {b : ‚Ñù | ‚Üëb < a},
    { rcases ereal_cases a with rfl|‚ü®x, rfl‚ü©|rfl,
      { simp only [not_lt_bot, set_of_false, is_open_empty] },
      { simp only [ereal.coe_real_lt], exact is_open_Iio },
      { simp only [is_open_univ, coe_lt_top, set_of_true]} } },
  { rw [@order_topology.topology_eq_generate_intervals ‚Ñù _],
    refine le_generate_from (assume s ha, _),
    rcases ha with ‚ü®a, rfl | rfl‚ü©,
    exact ‚ü®Ioi a, is_open_Ioi, by simp [Ioi]‚ü©,
    exact ‚ü®Iio a, is_open_Iio, by simp [Iio]‚ü© }
  end‚ü©,
  assume a b, by simp only [imp_self, ereal.coe_real_inj']‚ü©

lemma open_embedding_coe : open_embedding (coe : ‚Ñù ‚Üí ereal) :=
‚ü®embedding_coe,
begin
  convert @is_open_Ioo ereal _ _ _ ‚ä• ‚ä§,
  ext x,
  rcases ereal_cases x with rfl|‚ü®y, rfl‚ü©|rfl,
  { simp only [left_mem_Ioo, mem_range, (bot_ne_coe _).symm, exists_false, not_false_iff] },
  { simp only [mem_range_self, mem_Ioo, bot_lt_coe, coe_lt_top, and_self] },
  { simp only [mem_range, right_mem_Ioo, exists_false, coe_ne_top] }
end‚ü©

@[norm_cast] lemma tendsto_coe {f : filter Œ±} {m : Œ± ‚Üí ‚Ñù} {a : ‚Ñù} :
  tendsto (Œª a, (m a : ereal)) f (ùìù ‚Üëa) ‚Üî tendsto m f (ùìù a) :=
embedding_coe.tendsto_nhds_iff.symm

lemma continuous_coe : continuous (coe : ‚Ñù ‚Üí ereal) :=
embedding_coe.continuous

lemma continuous_coe_iff {f : Œ± ‚Üí ‚Ñù} :
  continuous (Œªa, (f a : ereal)) ‚Üî continuous f :=
embedding_coe.continuous_iff.symm

lemma nhds_coe {r : ‚Ñù} : ùìù (r : ereal) = (ùìù r).map coe :=
(open_embedding_coe.map_nhds_eq r).symm

lemma nhds_coe_coe {r p : ‚Ñù} :
  ùìù ((r : ereal), (p : ereal)) = (ùìù (r, p)).map (Œªp:‚Ñù √ó ‚Ñù, (p.1, p.2)) :=
((open_embedding_coe.prod open_embedding_coe).map_nhds_eq (r, p)).symm

lemma nhds_top : ùìù (‚ä§ : ereal) = ‚®Ö a ‚â† ‚ä§, ùìü (Ioi a) :=
nhds_top_order.trans $ by simp [lt_top_iff_ne_top, Ioi]

lemma nhds_top' : ùìù (‚ä§ : ereal) = ‚®Ö a : ‚Ñù, ùìü (Ioi a) :=
begin
  rw [nhds_top],
  apply le_antisymm,
  { exact infi_le_infi2 (Œª x, ‚ü®x, by simp‚ü©) },
  { refine le_infi (Œª r, le_infi (Œª hr, _)),
    rcases ereal_cases r with rfl|‚ü®x, rfl‚ü©|rfl,
    { exact (infi_le _ 0).trans (by simp) },
    { exact infi_le _ _ },
    { simpa using hr, } }
end

lemma tendsto_nhds_top_iff_real {m : Œ± ‚Üí ereal} {f : filter Œ±} :
  tendsto m f (ùìù ‚ä§) ‚Üî ‚àÄ x : ‚Ñù, ‚àÄ·∂† a in f, ‚Üëx < m a :=
by simp only [nhds_top', mem_Ioi, tendsto_infi, tendsto_principal]

lemma continuous_at_add_of_real (a b :‚Ñù) :
  continuous_at (Œª (p : ereal √ó ereal), p.1 + p.2) (a, b) :=
by simp only [continuous_at, nhds_coe_coe, ‚Üê coe_add, tendsto_map'_iff, (‚àò),
    tendsto_coe, tendsto_add]

lemma tendsto_coe_add_at_top (y : ‚Ñù) :
  tendsto (Œª (x : ereal), x + y) (ùìù ‚ä§) (ùìù ‚ä§) :=
begin
  simp [tendsto_nhds_top_iff_real],
  assume x,
  simp [nhds_top'],
end

#exit

lemma continuous_at_add_top (a : ‚Ñù) :
  continuous_at (Œª (p : ereal √ó ereal), p.1 + p.2) (‚ä§, a) :=
begin
  exact tendsto_nhds_top_mono' continuous_at_fst (Œª p, le_add_right le_rfl)
end

end
